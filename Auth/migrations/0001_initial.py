# Generated by Django 4.2.8 on 2023-12-27 06:02

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('Main', '0001_initial'),
        ('General', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('city', models.CharField(max_length=70, verbose_name='city')),
                ('current_address', models.TextField(blank=True, verbose_name='current address')),
                ('permanent_address', models.TextField(blank=True, verbose_name='permanent address')),
                ('zipcode', models.IntegerField(null=True, verbose_name='zipcode')),
                ('name', models.CharField(max_length=200, verbose_name='full name')),
                ('email', models.EmailField(error_messages={'unique': 'user with email already exists.'}, help_text="required. email number must be entered in the format: 'example@example.com'.", max_length=255, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='Email Address')),
                ('profile', models.ImageField(blank=True, null=True, upload_to='profile', verbose_name='profile')),
                ('gender', models.CharField(choices=[('MALE', 'MALE'), ('FEMALE', 'FEMALE'), ('OTHERS', 'OTHERS')], max_length=10, null=True, verbose_name='gender')),
                ('dob', models.DateField(max_length=8, null=True, verbose_name='date of birth')),
                ('mobile', models.CharField(help_text='Alphabets and special characters are not allowed.', max_length=15, unique=True, verbose_name='mobile number')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the college can log into this admin site.', verbose_name='college status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Main.category', verbose_name='category')),
                ('country', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Main.country')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('religion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Main.religion', verbose_name='religion')),
                ('state', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Main.state')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'All User',
                'verbose_name_plural': 'All Users',
                'ordering': ['-id'],
                'swappable': 'AUTH_USER_MODEL',
            },
        ),
        migrations.CreateModel(
            name='CollegeAdmin',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('department', models.CharField(max_length=20, verbose_name='Department')),
                ('designation', models.CharField(max_length=20, verbose_name='Designation')),
            ],
            options={
                'verbose_name': 'College User',
                'verbose_name_plural': 'College Users',
                'ordering': ['-id'],
            },
            bases=('Auth.user',),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('course_interest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='General.coursesubcategory')),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
                'ordering': ['-id'],
            },
            bases=('Auth.user',),
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=5000)),
                ('validity', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_token', to='Auth.student')),
            ],
        ),
        migrations.CreateModel(
            name='OTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.CharField(max_length=6)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='Auth.student')),
            ],
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institute', models.CharField(max_length=100, verbose_name='School/College/University')),
                ('institute_name', models.CharField(max_length=200, verbose_name='institute name')),
                ('degree', models.CharField(max_length=100, verbose_name='Degree')),
                ('grade_system', models.CharField(choices=[('CGPA', 'CGPA'), ('PERCENTAGE', 'PERCENTAGE')], default='CGPA', max_length=20)),
                ('score', models.DecimalField(blank=True, decimal_places=2, help_text='Enter a score between 0.00 and 100.00', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0.0, message='Score cannot be negative'), django.core.validators.MaxValueValidator(100.0, message='Score cannot be greater than 100')])),
                ('field_of_study', models.CharField(blank=True, max_length=100, null=True)),
                ('start_date', models.CharField(blank=True, max_length=50, null=True)),
                ('end_date', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Auth.student')),
            ],
            options={
                'verbose_name': 'Education',
                'verbose_name_plural': 'Educations',
            },
        ),
    ]
